exit
ENV['PATH']
ENV
env
env['path']
env['PATH']
PATH
@app
exit
$PATH
PATH
Rails.application.eager_load!  
ENV["PATH"]
ENV["path"]
ENV["Path"]
env["Path"]
env["path"]
ENV.each{|x| puts x if x.grep(/path/)}
Rails.application.eager_load!  
ENV.each{|x| puts x if x.grep(/path/)}
ENV.each{|x| puts x if x.name.grep(/path/)}
ENV.each{|x| puts x if x.name.grep(/path/)
ENV["path"]
ENV
LS
ls
Dir.ls
File.ls
File.show
File
Dir.pwd
Dir
PATH
Path
self
@app
@app["root"]
@app
@App
app
@app['root']
exit
params['REPS']
exit
params['REPS']
params
exit
params['REPS']
reps
exit
attribs
models.each { |x| attribs += x.column_names.count }
attribs = 0
models.each { |x| attribs += x.column_names.count }
attribs
models.each { |x| attribs = attribs + x.column_names.count }
attribs = 0
models.each { |x| attribs = attribs + x.column_names.count }
attribs = 0
attribs
models.each { |x| attribs = attribs + x.column_names.count }
models.each { |x| x.column_names.count }.sum
models.each { |x| attribs x.column_names.count }.sum
models.each { |x| attribs += x.column_names.count }
models.first.column_names.count
models.first.column_names
models.first.column_name
models.first
exit
reject_models
ignore_models
models = reject_models.select{|x| model_list.include? x}
models = reject_models.reject{|x| model_list.include? x}
reject_models.except{|x| model_list.include? x}
model_list
reject_models
models.include? Comment
models = model_list.reject{|x| reject_models.include? x.name}
reject_models
reject_models.flatten!
reject_mdoels.flatten!
reject_models << ignore_models.split(',') if ignore_models
ignore_models = ['Comment']
models
next
models
exit
model_list.reject{|x| ignore_models.include? x.name}.include? Comment14
model_list.reject{|x| ignore_models.include? x.name}.include? Comment13
model_list.reject{|x| ignore_models.include? x.name}.include? Comment
model_list.reject{|x| ignore_models.include? x.name}
ignore_models = rejectors
model_list.reject{|x| ignore_models.include? x.name}
model_list = models
model_list.reject{|x| ignore_models.include? x.name}
models.select{|x|  rejectors.include? x.name}
models.select{|x|  recjectors.include? x.name}
models.select{|x|  target_columns.include? x.name}
rejectors
  models.except{|x| rejectors.include? x.name}
  models.reject{|x| rejectors.include? x.name}
  models.reject{|x| x.name.include? rejectors}
  models.reject{|x| x.name rejectors}
rejectors = ['Comment', 'Comment13']
  models.reject{|x| x.name rejectors}
  models.each{|x| x.name == 'Comment12'}
  models.include? 'Comment12'
  models.map{|x| x.name.include? 'Comment12'}
  models.map{|x| x.include? 'Comment12'}
  models = ActiveRecord::Base.descendants
models.each{|x| puts "#{x.name & 'Comment13'}"}
models.each{|x| puts "#{}
models & 'Comment13'
models
ignore.reject{|x| x.constantize == NameError}
ignore.reject{|x| x.constantize == Error}
ignore.reject{|x| x.constantize == nil}
ignore
ignore.reject{|x| x.respond_to? :constantize}
ignore.except{|x| x.respond_to? :constantize}
ignore.map{|x| puts x.respond_to? :constantize}
ignore.map{|x| puts x.responds_to? :constantize}
ignore.map{|x| puts x.responds_to? constantize}
ignore.map{|x| puts x.responds_to?constantize}
ignore.map{|x| puts x.classify.constantize}
ignore.map{|x| puts x.classify}
ignore
ignore.flatten!
ignore = ["test", "cheat", ["tester", "cheater"]]
remove
remove.map!{|x| puts x.class}
remove.map!{|x| x.constantize}
 remove.reject!{|x| x.classify.constantize}
remove.map!{|x| x.classify.constantize}
models = models - remove.flatten.map!{|x| x.classify.constantize}
remove
remove.reject!{|x| x.nil?}
remove
remove.reject{|x| x.nil?}
remove[1].delete
remove[1].del
remove[1].remove
remove.flatten!
models = models - remove.flatten.map!{|x| x.classify.constantize}
models = ActiveRecord::Base.descendants 
remove << ignore.split(',') if ignore
ignore = ["test", "cheat", ["tester", "cheater"]]
remove << ignore.split(',') if ignore
remove = ["ActiveRecord::SchemaMigration"] ( << ignore.split(',') if ignore)
remove = ["ActiveRecord::SchemaMigration"] << (ignore.split(',') if ignore)
remove = ["ActiveRecord::SchemaMigration"] << ignore.split(',') if ignore
remove
exit
remove
exit
models.each{|x| puts x.name}
models.first
models.each{|x| x.grep(/Com/)}
models.each{|x| x.(/Com/)}
models.include? (/Comm/)
models
exit
model
exit
counters
model_count.each{|x| counters += x.columns.count}
counters = 0
b = 0
model_count.each{|x| b += x.columns.count}
model_count.each{|x| puts x.columns.count}
model_count.each{|x| x.columns.count}
model_count.each{|x| x.columns.count}.sum
model_count.count
model_count
exit
ARDiscovery.find_models
ARDiscovery.find_model
ARDiscovery
models
exit
models = ActiveRecord::Base.descendants
models
exit
reject_models.flatten
reject_models
exit
@tests.each { |x| puts x}
@tests[1]
@tests[0]
@test[0]
y.name
y
@tests[x]
next
t
target_test
next
log = Logger.new(file)
 file = File.join(Rails.root, 'log', @folder, "#{log_name}.log")
log_name
file
exit
x.to_s
x
exit
AutoSeed2
AutoSeed3
AutoSeed4
exit
AutoSeed4
AutoSeed3
AutoSeed2
AutoSeed
pwd
ENV['PATH']
ENV.each
ENV.include?
p ENV
pp ENV
ENV
env
env['PATH']
PATH
dir
Path
load '../lib/test_run.rb'
exit
reject_models
exit
reject_models
exit
reject_models.flatten
reject_models
exit
(reject_models.push(params['EXCLUDE'].split(','))).flatten
reject_models.flatten
reject_models
p
p = params['EXCLUDE'].split.flatten
params['EXCLUDE'].split.flatten
params['EXCLUDE'].split
params['EXCLUDE']
params
reject_models
exit
reject_models
exit
reject_models
exit
Post.last
result
exit
name
@logger[name]
exit
@logger[name]
